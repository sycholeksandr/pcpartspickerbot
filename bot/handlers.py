"""Handlers for Telegram bot callbacks and messages."""

from telegram import Update
from telegram.ext import ContextTypes

from .keyboards import start_keyboard
from .recommender import recommend_parts
from nlp_integration.nlp import extract_price_task, generate_recommendations


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle the /start command from the user.

    Args:
        update (Update): Telegram update object.
        context (ContextTypes.DEFAULT_TYPE): Context object with user data.
    """
    context.user_data["active"] = False
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –ù–∞—Ç–∏—Å–Ω–∏ 'üöÄ –ü–æ—á–∞—Ç–∏', —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –ø—ñ–¥–±—ñ—Ä –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.",
        reply_markup=start_keyboard
    )


async def start_build(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Activate build process after 'üöÄ –ü–æ—á–∞—Ç–∏' is pressed.

    Args:
        update (Update): Telegram update object.
        context (ContextTypes.DEFAULT_TYPE): Context object with user data.
    """
    context.user_data["active"] = True
    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        "üë∑ –ü—ñ–¥–±—ñ—Ä —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç —ñ —Ç–∏–ø –∑–∞–¥–∞—á (—ñ–≥—Ä–∏ —á–∏ —Ä–æ–±–æ—Ç–∞)."
    )


async def stop_build(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Deactivate build process after 'üõë –ó—É–ø–∏–Ω–∏—Ç–∏' is pressed.

    Args:
        update (Update): Telegram update object.
        context (ContextTypes.DEFAULT_TYPE): Context object with user data.
    """
    context.user_data["active"] = False
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üõë –ü—ñ–¥–±—ñ—Ä –≤–∏–º–∫–Ω–µ–Ω–æ.")


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    Handle user text input and generate PC configuration.

    Args:
        update (Update): Telegram update object containing the message.
        context (ContextTypes.DEFAULT_TYPE): Context with user state.
    """
    user_text = update.message.text.strip().lower()

    if user_text == "üöÄ –ø–æ—á–∞—Ç–∏":
        context.user_data["active"] = True
        await update.message.reply_text(
            "üë∑ –ù–∞–ø–∏—à–∏ —Å–≤—ñ–π –±—é–¥–∂–µ—Ç($) —ñ —Ç–∏–ø –∑–∞–¥–∞—á (—ñ–≥—Ä–∏ —á–∏ —Ä–æ–±–æ—Ç–∞)."
        )
        return

    if user_text == "üõë –∑—É–ø–∏–Ω–∏—Ç–∏":
        context.user_data["active"] = False
        await update.message.reply_text(
            "üõë –ü—ñ–¥–±—ñ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω–∏ 'üöÄ –ü–æ—á–∞—Ç–∏', —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É."
        )
        return

    if not context.user_data.get("active", False):
        await update.message.reply_text("‚ö†Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ 'üöÄ –ü–æ—á–∞—Ç–∏', —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏.")
        return

    data = await extract_price_task(user_text)
    if not data:
        await update.message.reply_text(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –∑–∞–ø–∏—Ç. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: '–ü–ö –¥–æ 1200$ –¥–ª—è —ñ–≥–æ—Ä'."
        )
        return

    build = recommend_parts(data["price"], data["task"])
    recommendations = await generate_recommendations(build)

    response_text = (
        "–û—Å—å —Ç–≤–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –∑–±—ñ—Ä–∫–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º:\n"
        + "\n".join(f"{k}: {v}" for k, v in build.items())
        + "\n\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:\n"
        + recommendations
    )

    await update.message.reply_text(response_text)
    await update.message.reply_text(
        "üîÅ –•–æ—á–µ—à –∑—ñ–±—Ä–∞—Ç–∏ —â–µ –æ–¥–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ 'üõë –ó—É–ø–∏–Ω–∏—Ç–∏'.",
        reply_markup=start_keyboard
    )
